{
  "address": "0x08353DAb91741a56430Da413e7DCcbff7F2d0A37",
  "abi": [
    {
      "inputs": [],
      "name": "CalldataMustHaveValidPayload",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CalldataOverOrUnderFlow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CanNotPickMedianOfEmptyArray",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DataPackageTimestampMustNotBeZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DataPackageTimestampsMustBeEqual",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DataTimestampCannotBeZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EachSignerMustProvideTheSameValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptyCalldataPointersArr",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GetDataServiceIdNotImplemented",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IncorrectUnsignedMetadataSize",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "receivedSignersCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "requiredSignersCount",
          "type": "uint256"
        }
      ],
      "name": "InsufficientNumberOfUniqueSigners",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidCalldataPointer",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "signedHash",
          "type": "bytes32"
        }
      ],
      "name": "InvalidSignature",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RedstonePayloadMustHaveAtLeastOneDataPackage",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receivedSigner",
          "type": "address"
        }
      ],
      "name": "SignerNotAuthorised",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TimestampsMustBeEqual",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "valueByteSize",
          "type": "uint256"
        }
      ],
      "name": "TooLargeValueByteSize",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "aggregateValues",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "extractTimestampsAndAssertAllAreEqual",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "extractedTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signerAddress",
          "type": "address"
        }
      ],
      "name": "getAuthorisedSignerIndex",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBtcPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDataServiceId",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEthPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMultiplePrices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "ethPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "btcPrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUniqueSignersThreshold",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "receivedTimestampMilliseconds",
          "type": "uint256"
        }
      ],
      "name": "validateTimestamp",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3d42b563141b5fbb194677613b8a61632c7f3fb57113073b097ebbee4381a4e6",
  "receipt": {
    "to": null,
    "from": "0x6e8BeF9c09D4c2a089D682CA40726e9ada2C8bff",
    "contractAddress": "0x08353DAb91741a56430Da413e7DCcbff7F2d0A37",
    "transactionIndex": 1,
    "gasUsed": "1037476",
    "logsBloom": "0x
    "blockHash": "0xee4ee950615aa5d0b8e3e8900f3f5913522cc329f9a629f4bcb5a70e3d99179d",
    "transactionHash": "0x3d42b563141b5fbb194677613b8a61632c7f3fb57113073b097ebbee4381a4e6",
    "logs": [],
    "blockNumber": 27968383,
    "cumulativeGasUsed": "1083584",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ab460a26d756d19c0299d3728b990899",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CalldataMustHaveValidPayload\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CalldataOverOrUnderFlow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CanNotPickMedianOfEmptyArray\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DataPackageTimestampMustNotBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DataPackageTimestampsMustBeEqual\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DataTimestampCannotBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EachSignerMustProvideTheSameValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyCalldataPointersArr\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GetDataServiceIdNotImplemented\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectUnsignedMetadataSize\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receivedSignersCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requiredSignersCount\",\"type\":\"uint256\"}],\"name\":\"InsufficientNumberOfUniqueSigners\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCalldataPointer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"signedHash\",\"type\":\"bytes32\"}],\"name\":\"InvalidSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RedstonePayloadMustHaveAtLeastOneDataPackage\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receivedSigner\",\"type\":\"address\"}],\"name\":\"SignerNotAuthorised\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TimestampsMustBeEqual\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"valueByteSize\",\"type\":\"uint256\"}],\"name\":\"TooLargeValueByteSize\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"aggregateValues\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extractTimestampsAndAssertAllAreEqual\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"extractedTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signerAddress\",\"type\":\"address\"}],\"name\":\"getAuthorisedSignerIndex\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBtcPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDataServiceId\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEthPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMultiplePrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ethPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"btcPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUniqueSignersThreshold\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receivedTimestampMilliseconds\",\"type\":\"uint256\"}],\"name\":\"validateTimestamp\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Uses MainDemoConsumerBase for testnet compatibility\",\"kind\":\"dev\",\"methods\":{\"aggregateValues(uint256[])\":{\"details\":\"This function may be overridden by the child consumer contract. It should aggregate values from different signers to a single uint value. By default, it calculates the median value\",\"params\":{\"values\":\"An array of uint256 values from different signers\"},\"returns\":{\"_0\":\"Result of the aggregation in the form of a single number\"}},\"getBtcPrice()\":{\"returns\":{\"_0\":\"price The current BTC price in USD (8 decimals)\"}},\"getDataServiceId()\":{\"details\":\"This function must be implemented by the child consumer contract. It should return dataServiceId which DataServiceWrapper will use if not provided explicitly . If not overridden, value will always have to be provided explicitly in DataServiceWrapper.\",\"returns\":{\"_0\":\"dataServiceId being consumed by contract\"}},\"getEthPrice()\":{\"returns\":{\"_0\":\"price The current ETH price in USD (8 decimals)\"}},\"getMultiplePrices()\":{\"returns\":{\"btcPrice\":\"The current BTC price\",\"ethPrice\":\"The current ETH price\"}},\"getUniqueSignersThreshold()\":{\"details\":\"This function must be implemented by the child consumer contract.\",\"returns\":{\"_0\":\"The minimum required value of unique authorised signers\"}},\"validateTimestamp(uint256)\":{\"details\":\"Allows oracle data from up to 15 minutes in the past or future This is useful for local development where blockchain time may differ from real-time\",\"params\":{\"receivedTimestampMilliseconds\":\"Timestamp from the oracle data package\"}}},\"title\":\"PriceFeed\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getBtcPrice()\":{\"notice\":\"Get the latest BTC/USD price\"},\"getEthPrice()\":{\"notice\":\"Get the latest ETH/USD price\"},\"getMultiplePrices()\":{\"notice\":\"Get multiple prices at once\"},\"validateTimestamp(uint256)\":{\"notice\":\"Override timestamp validation to allow more lenient checks\"}},\"notice\":\"Fetches real-time price data using RedStone Pull oracle\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PriceFeed.sol\":\"PriceFeed\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@redstone-finance/evm-connector/contracts/core/CalldataExtractor.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"./RedstoneConstants.sol\\\";\\n\\n/**\\n * @title The base contract with the main logic of data extraction from calldata\\n * @author The Redstone Oracles team\\n * @dev This contract was created to reuse the same logic in the RedstoneConsumerBase\\n * and the ProxyConnector contracts\\n */\\ncontract CalldataExtractor is RedstoneConstants {\\n\\n  error DataPackageTimestampMustNotBeZero();\\n  error DataPackageTimestampsMustBeEqual();\\n  error RedstonePayloadMustHaveAtLeastOneDataPackage();\\n  error TooLargeValueByteSize(uint256 valueByteSize);\\n\\n  function extractTimestampsAndAssertAllAreEqual() public pure returns (uint256 extractedTimestamp) {\\n    uint256 calldataNegativeOffset = _extractByteSizeOfUnsignedMetadata();\\n    uint256 dataPackagesCount;\\n    (dataPackagesCount, calldataNegativeOffset) = _extractDataPackagesCountFromCalldata(calldataNegativeOffset);\\n\\n    if (dataPackagesCount == 0) {\\n      revert RedstonePayloadMustHaveAtLeastOneDataPackage();\\n    }\\n\\n    for (uint256 dataPackageIndex = 0; dataPackageIndex < dataPackagesCount; dataPackageIndex++) {\\n      uint256 dataPackageByteSize = _getDataPackageByteSize(calldataNegativeOffset);\\n\\n      // Extracting timestamp for the current data package\\n      uint48 dataPackageTimestamp; // uint48, because timestamp uses 6 bytes\\n      uint256 timestampNegativeOffset = (calldataNegativeOffset + TIMESTAMP_NEGATIVE_OFFSET_IN_DATA_PACKAGE_WITH_STANDARD_SLOT_BS);\\n      uint256 timestampOffset = msg.data.length - timestampNegativeOffset;\\n      assembly {\\n        dataPackageTimestamp := calldataload(timestampOffset)\\n      }\\n\\n      if (dataPackageTimestamp == 0) {\\n        revert DataPackageTimestampMustNotBeZero();\\n      }\\n\\n      if (extractedTimestamp == 0) {\\n        extractedTimestamp = dataPackageTimestamp;\\n      } else if (dataPackageTimestamp != extractedTimestamp) {\\n        revert DataPackageTimestampsMustBeEqual();\\n      }\\n\\n      calldataNegativeOffset += dataPackageByteSize;\\n    }\\n  }\\n\\n  function _getDataPackageByteSize(uint256 calldataNegativeOffset) internal pure returns (uint256) {\\n    (\\n      uint256 dataPointsCount,\\n      uint256 eachDataPointValueByteSize\\n    ) = _extractDataPointsDetailsForDataPackage(calldataNegativeOffset);\\n\\n    return\\n      dataPointsCount *\\n      (DATA_POINT_SYMBOL_BS + eachDataPointValueByteSize) +\\n      DATA_PACKAGE_WITHOUT_DATA_POINTS_BS;\\n  }\\n\\n  function _extractByteSizeOfUnsignedMetadata() internal pure returns (uint256) {\\n    // Checking if the calldata ends with the RedStone marker\\n    bool hasValidRedstoneMarker;\\n    assembly {\\n      let calldataLast32Bytes := calldataload(sub(calldatasize(), STANDARD_SLOT_BS))\\n      hasValidRedstoneMarker := eq(\\n        REDSTONE_MARKER_MASK,\\n        and(calldataLast32Bytes, REDSTONE_MARKER_MASK)\\n      )\\n    }\\n    if (!hasValidRedstoneMarker) {\\n      revert CalldataMustHaveValidPayload();\\n    }\\n\\n    // Using uint24, because unsigned metadata byte size number has 3 bytes\\n    uint24 unsignedMetadataByteSize;\\n    if (REDSTONE_MARKER_BS_PLUS_STANDARD_SLOT_BS > msg.data.length) {\\n      revert CalldataOverOrUnderFlow();\\n    }\\n    assembly {\\n      unsignedMetadataByteSize := calldataload(\\n        sub(calldatasize(), REDSTONE_MARKER_BS_PLUS_STANDARD_SLOT_BS)\\n      )\\n    }\\n    uint256 calldataNegativeOffset = unsignedMetadataByteSize\\n      + UNSIGNED_METADATA_BYTE_SIZE_BS\\n      + REDSTONE_MARKER_BS;\\n    if (calldataNegativeOffset + DATA_PACKAGES_COUNT_BS > msg.data.length) {\\n      revert IncorrectUnsignedMetadataSize();\\n    }\\n    return calldataNegativeOffset;\\n  }\\n\\n  // We return uint16, because unsigned metadata byte size number has 2 bytes\\n  function _extractDataPackagesCountFromCalldata(uint256 calldataNegativeOffset)\\n    internal\\n    pure\\n    returns (uint16 dataPackagesCount, uint256 nextCalldataNegativeOffset)\\n  {\\n    uint256 calldataNegativeOffsetWithStandardSlot = calldataNegativeOffset + STANDARD_SLOT_BS;\\n    if (calldataNegativeOffsetWithStandardSlot > msg.data.length) {\\n      revert CalldataOverOrUnderFlow();\\n    }\\n    assembly {\\n      dataPackagesCount := calldataload(\\n        sub(calldatasize(), calldataNegativeOffsetWithStandardSlot)\\n      )\\n    }\\n    return (dataPackagesCount, calldataNegativeOffset + DATA_PACKAGES_COUNT_BS);\\n  }\\n\\n  function _extractDataPointValueAndDataFeedId(\\n    uint256 dataPointNegativeOffset,\\n    uint256 dataPointValueByteSize\\n  ) internal pure virtual returns (bytes32 dataPointDataFeedId, uint256 dataPointValue) {\\n    uint256 dataPointCalldataOffset = msg.data.length - dataPointNegativeOffset;\\n    assembly {\\n      dataPointDataFeedId := calldataload(dataPointCalldataOffset)\\n      dataPointValue := calldataload(add(dataPointCalldataOffset, DATA_POINT_SYMBOL_BS))\\n    }\\n    if (dataPointValueByteSize >= 33) {\\n      revert TooLargeValueByteSize(dataPointValueByteSize);\\n    }\\n    unchecked {\\n      dataPointValue = dataPointValue >> (32 - dataPointValueByteSize) * 8; \\n    }\\n  }\\n\\n  function _extractDataPointsDetailsForDataPackage(uint256 calldataNegativeOffsetForDataPackage)\\n    internal\\n    pure\\n    returns (uint256 dataPointsCount, uint256 eachDataPointValueByteSize)\\n  {\\n    // Using uint24, because data points count byte size number has 3 bytes\\n    uint24 dataPointsCount_;\\n\\n    // Using uint32, because data point value byte size has 4 bytes\\n    uint32 eachDataPointValueByteSize_;\\n\\n    // Extract data points count\\n    uint256 calldataOffset = msg.data.length - (calldataNegativeOffsetForDataPackage + SIG_BS + STANDARD_SLOT_BS);\\n    assembly {\\n      dataPointsCount_ := calldataload(calldataOffset)\\n    }\\n\\n    // Extract each data point value size\\n    calldataOffset = calldataOffset - DATA_POINTS_COUNT_BS;\\n    assembly {\\n      eachDataPointValueByteSize_ := calldataload(calldataOffset)\\n    }\\n\\n    // Prepare returned values\\n    dataPointsCount = dataPointsCount_;\\n    eachDataPointValueByteSize = eachDataPointValueByteSize_;\\n  }\\n}\\n\",\"keccak256\":\"0x7fb8409876e648a1674f2d61e5331ed909d5de65cd03ba5e2f1ca91ea282b0a6\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/core/RedstoneConstants.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title The base contract with helpful constants\\n * @author The Redstone Oracles team\\n * @dev It mainly contains redstone-related values, which improve readability\\n * of other contracts (e.g. CalldataExtractor and RedstoneConsumerBase)\\n */\\ncontract RedstoneConstants {\\n  // === Abbreviations ===\\n  // BS - Bytes size\\n  // PTR - Pointer (memory location)\\n  // SIG - Signature\\n\\n  // Solidity and YUL constants\\n  uint256 internal constant STANDARD_SLOT_BS = 32;\\n  uint256 internal constant FREE_MEMORY_PTR = 0x40;\\n  uint256 internal constant BYTES_ARR_LEN_VAR_BS = 32;\\n  uint256 internal constant REVERT_MSG_OFFSET = 68; // Revert message structure described here: https://ethereum.stackexchange.com/a/66173/106364\\n  uint256 internal constant STRING_ERR_MESSAGE_MASK = 0x08c379a000000000000000000000000000000000000000000000000000000000;\\n\\n  // RedStone protocol consts\\n  uint256 internal constant SIG_BS = 65;\\n  uint256 internal constant TIMESTAMP_BS = 6;\\n  uint256 internal constant DATA_PACKAGES_COUNT_BS = 2;\\n  uint256 internal constant DATA_POINTS_COUNT_BS = 3;\\n  uint256 internal constant DATA_POINT_VALUE_BYTE_SIZE_BS = 4;\\n  uint256 internal constant DATA_POINT_SYMBOL_BS = 32;\\n  uint256 internal constant UNSIGNED_METADATA_BYTE_SIZE_BS = 3;\\n  uint256 internal constant REDSTONE_MARKER_BS = 9; // byte size of 0x000002ed57011e0000\\n  uint256 internal constant REDSTONE_MARKER_MASK = 0x0000000000000000000000000000000000000000000000000002ed57011e0000;\\n\\n  // Derived values (based on consts)\\n  uint256 internal constant TIMESTAMP_NEGATIVE_OFFSET_IN_DATA_PACKAGE_WITH_STANDARD_SLOT_BS = 104; // SIG_BS + DATA_POINTS_COUNT_BS + DATA_POINT_VALUE_BYTE_SIZE_BS + STANDARD_SLOT_BS\\n  uint256 internal constant DATA_PACKAGE_WITHOUT_DATA_POINTS_BS = 78; // DATA_POINT_VALUE_BYTE_SIZE_BS + TIMESTAMP_BS + DATA_POINTS_COUNT_BS + SIG_BS\\n  uint256 internal constant DATA_PACKAGE_WITHOUT_DATA_POINTS_AND_SIG_BS = 13; // DATA_POINT_VALUE_BYTE_SIZE_BS + TIMESTAMP_BS + DATA_POINTS_COUNT_BS\\n  uint256 internal constant REDSTONE_MARKER_BS_PLUS_STANDARD_SLOT_BS = 41; // REDSTONE_MARKER_BS + STANDARD_SLOT_BS\\n\\n  // Error messages\\n  error CalldataOverOrUnderFlow();\\n  error IncorrectUnsignedMetadataSize();\\n  error InsufficientNumberOfUniqueSigners(uint256 receivedSignersCount, uint256 requiredSignersCount);\\n  error EachSignerMustProvideTheSameValue();\\n  error EmptyCalldataPointersArr();\\n  error InvalidCalldataPointer();\\n  error CalldataMustHaveValidPayload();\\n  error SignerNotAuthorised(address receivedSigner);\\n  error DataTimestampCannotBeZero();\\n  error TimestampsMustBeEqual();\\n}\\n\",\"keccak256\":\"0x559f114791f291cf4d511833621e6896014138a74944b684a6c9268443ca0715\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/core/RedstoneConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"./RedstoneConstants.sol\\\";\\nimport \\\"./RedstoneDefaultsLib.sol\\\";\\nimport \\\"./CalldataExtractor.sol\\\";\\nimport \\\"../libs/BitmapLib.sol\\\";\\nimport \\\"../libs/SignatureLib.sol\\\";\\n\\n/**\\n * @title The base contract with the main Redstone logic\\n * @author The Redstone Oracles team\\n * @dev Do not use this contract directly in consumer contracts, take a\\n * look at `RedstoneConsumerNumericBase` and `RedstoneConsumerBytesBase` instead\\n */\\nabstract contract RedstoneConsumerBase is CalldataExtractor {\\n\\n  error GetDataServiceIdNotImplemented();\\n\\n  /* ========== VIRTUAL FUNCTIONS (MAY BE OVERRIDDEN IN CHILD CONTRACTS) ========== */\\n\\n  /**\\n   * @dev This function must be implemented by the child consumer contract.\\n   * It should return dataServiceId which DataServiceWrapper will use if not provided explicitly .\\n   * If not overridden, value will always have to be provided explicitly in DataServiceWrapper.\\n   * @return dataServiceId being consumed by contract\\n   */\\n  function getDataServiceId() public view virtual returns (string memory) {\\n    revert GetDataServiceIdNotImplemented();\\n  }\\n\\n  /**\\n   * @dev This function must be implemented by the child consumer contract.\\n   * It should return a unique index for a given signer address if the signer\\n   * is authorised, otherwise it should revert\\n   * @param receivedSigner The address of a signer, recovered from ECDSA signature\\n   * @return Unique index for a signer in the range [0..255]\\n   */\\n  function getAuthorisedSignerIndex(address receivedSigner) public view virtual returns (uint8);\\n\\n  /**\\n   * @dev This function may be overridden by the child consumer contract.\\n   * It should validate the timestamp against the current time (block.timestamp)\\n   * It should revert with a helpful message if the timestamp is not valid\\n   * @param receivedTimestampMilliseconds Timestamp extracted from calldata\\n   */\\n  function validateTimestamp(uint256 receivedTimestampMilliseconds) public view virtual {\\n    RedstoneDefaultsLib.validateTimestamp(receivedTimestampMilliseconds);\\n  }\\n\\n  /**\\n   * @dev This function must be implemented by the child consumer contract.\\n   * @return The minimum required value of unique authorised signers\\n   */\\n  function getUniqueSignersThreshold() public view virtual returns (uint8);\\n\\n  /**\\n   * @dev This function may be overridden by the child consumer contract.\\n   * It should aggregate values from different signers to a single uint value.\\n   * By default, it calculates the median value\\n   * @param values An array of uint256 values from different signers\\n   * @return Result of the aggregation in the form of a single number\\n   */\\n  function aggregateValues(uint256[] memory values) public view virtual returns (uint256) {\\n    return RedstoneDefaultsLib.aggregateValues(values);\\n  }\\n\\n  /* ========== FUNCTIONS WITH IMPLEMENTATION (CAN NOT BE OVERRIDDEN) ========== */\\n\\n  /**\\n   * @dev This is an internal helpful function for secure extraction oracle values\\n   * from the tx calldata. Security is achieved by signatures verification, timestamp\\n   * validation, and aggregating values from different authorised signers into a\\n   * single numeric value. If any of the required conditions (e.g. packages with different \\n   * timestamps or insufficient number of authorised signers) do not match, the function \\n   * will revert.\\n   *\\n   * Note! You should not call this function in a consumer contract. You can use\\n   * `getOracleNumericValuesFromTxMsg` or `getOracleNumericValueFromTxMsg` instead.\\n   *\\n   * @param dataFeedIds An array of unique data feed identifiers\\n   * @return An array of the extracted and verified oracle values in the same order\\n   * as they are requested in dataFeedIds array\\n   * @return dataPackagesTimestamp timestamp equal for all data packages\\n   */\\n  function _securelyExtractOracleValuesAndTimestampFromTxMsg(bytes32[] memory dataFeedIds)\\n    internal\\n    view\\n    returns (uint256[] memory, uint256 dataPackagesTimestamp)\\n  {\\n    // Initializing helpful variables and allocating memory\\n    uint256[] memory uniqueSignerCountForDataFeedIds = new uint256[](dataFeedIds.length);\\n    uint256[] memory signersBitmapForDataFeedIds = new uint256[](dataFeedIds.length);\\n    uint256[][] memory valuesForDataFeeds = new uint256[][](dataFeedIds.length);\\n    uint256 uniqueSignersThreshold = getUniqueSignersThreshold();\\n    for (uint256 i = 0; i < dataFeedIds.length;) {\\n      // The line below is commented because newly allocated arrays are filled with zeros\\n      // But we left it for better readability\\n      // signersBitmapForDataFeedIds[i] = 0; // <- setting to an empty bitmap\\n      valuesForDataFeeds[i] = new uint256[](uniqueSignersThreshold);\\n      unchecked {\\n        i++;\\n      }\\n    }\\n\\n    // Extracting the number of data packages from calldata\\n    uint256 calldataNegativeOffset = _extractByteSizeOfUnsignedMetadata();\\n    uint256 dataPackagesCount;\\n    (dataPackagesCount, calldataNegativeOffset) = _extractDataPackagesCountFromCalldata(calldataNegativeOffset);\\n\\n    // Saving current free memory pointer\\n    uint256 freeMemPtr;\\n    assembly {\\n      freeMemPtr := mload(FREE_MEMORY_PTR)\\n    }\\n\\n    // Data packages extraction in a loop\\n    for (uint256 dataPackageIndex = 0; dataPackageIndex < dataPackagesCount;) {\\n      // Extract data package details and update calldata offset\\n      uint256 dataPackageTimestamp;\\n      (calldataNegativeOffset, dataPackageTimestamp) = _extractDataPackage(\\n        dataFeedIds,\\n        uniqueSignerCountForDataFeedIds,\\n        signersBitmapForDataFeedIds,\\n        valuesForDataFeeds,\\n        calldataNegativeOffset\\n      );\\n\\n      if (dataPackageTimestamp == 0) {\\n        revert DataTimestampCannotBeZero();\\n      }\\n\\n      if (dataPackageTimestamp != dataPackagesTimestamp) {\\n        if (dataPackagesTimestamp == 0) {\\n          // Setting dataPackagesTimestamp first time\\n          dataPackagesTimestamp = dataPackageTimestamp;    \\n        } else {\\n          revert TimestampsMustBeEqual();\\n        }\\n      }\\n\\n      // Resetting the memory pointer to the initial \\\"safe\\\" value\\n      // We add STANDARD_SLOT_BS (32 bytes) to account for potential allocation\\n      // of the dataPackageIndex variable, which may or may not be stored in memory\\n      assembly {\\n        mstore(FREE_MEMORY_PTR, add(freeMemPtr, STANDARD_SLOT_BS))\\n      }\\n      unchecked {\\n        dataPackageIndex++;\\n      }\\n    }\\n\\n    // Validating numbers of unique signers and calculating aggregated values for each dataFeedId\\n    return (_getAggregatedValues(valuesForDataFeeds, uniqueSignerCountForDataFeedIds), dataPackagesTimestamp);\\n  }\\n\\n  /**\\n   * @dev This is a private helpful function, which extracts data for a data package based\\n   * on the given negative calldata offset, verifies them, and in the case of successful\\n   * verification updates the corresponding data package values in memory\\n   *\\n   * @param dataFeedIds an array of unique data feed identifiers\\n   * @param uniqueSignerCountForDataFeedIds an array with the numbers of unique signers\\n   * for each data feed\\n   * @param signersBitmapForDataFeedIds an array of signer bitmaps for data feeds\\n   * @param valuesForDataFeeds 2-dimensional array, valuesForDataFeeds[i][j] contains\\n   * j-th value for the i-th data feed\\n   * @param calldataNegativeOffset negative calldata offset for the given data package\\n   *\\n   * @return nextCalldataNegativeOffset negative calldata offset for the next data package\\n   * @return dataPackageTimestamp data package timestamp\\n   */\\n  function _extractDataPackage(\\n    bytes32[] memory dataFeedIds,\\n    uint256[] memory uniqueSignerCountForDataFeedIds,\\n    uint256[] memory signersBitmapForDataFeedIds,\\n    uint256[][] memory valuesForDataFeeds,\\n    uint256 calldataNegativeOffset\\n  ) private view returns (uint256 nextCalldataNegativeOffset, uint256 dataPackageTimestamp) {\\n    uint256 signerIndex;\\n\\n    (\\n      uint256 dataPointsCount,\\n      uint256 eachDataPointValueByteSize\\n    ) = _extractDataPointsDetailsForDataPackage(calldataNegativeOffset);\\n\\n    // We use scopes to resolve problem with too deep stack\\n    {\\n      address signerAddress;\\n      bytes32 signedHash;\\n      bytes memory signedMessage;\\n      uint256 signedMessageBytesCount;\\n      uint48 extractedTimestamp;\\n\\n      signedMessageBytesCount = dataPointsCount * (eachDataPointValueByteSize + DATA_POINT_SYMBOL_BS)\\n        + DATA_PACKAGE_WITHOUT_DATA_POINTS_AND_SIG_BS; //DATA_POINT_VALUE_BYTE_SIZE_BS + TIMESTAMP_BS + DATA_POINTS_COUNT_BS\\n\\n      uint256 timestampCalldataOffset = msg.data.length - \\n        (calldataNegativeOffset + TIMESTAMP_NEGATIVE_OFFSET_IN_DATA_PACKAGE_WITH_STANDARD_SLOT_BS);\\n\\n      uint256 signedMessageCalldataOffset = msg.data.length - \\n        (calldataNegativeOffset + SIG_BS + signedMessageBytesCount);\\n\\n      assembly {\\n        // Extracting the signed message\\n        signedMessage := extractBytesFromCalldata(\\n          signedMessageCalldataOffset,\\n          signedMessageBytesCount\\n        )\\n\\n        // Hashing the signed message\\n        signedHash := keccak256(add(signedMessage, BYTES_ARR_LEN_VAR_BS), signedMessageBytesCount)\\n\\n        // Extracting timestamp\\n        extractedTimestamp := calldataload(timestampCalldataOffset)\\n\\n        function initByteArray(bytesCount) -> ptr {\\n          ptr := mload(FREE_MEMORY_PTR)\\n          mstore(ptr, bytesCount)\\n          ptr := add(ptr, BYTES_ARR_LEN_VAR_BS)\\n          mstore(FREE_MEMORY_PTR, add(ptr, bytesCount))\\n        }\\n\\n        function extractBytesFromCalldata(offset, bytesCount) -> extractedBytes {\\n          let extractedBytesStartPtr := initByteArray(bytesCount)\\n          calldatacopy(\\n            extractedBytesStartPtr,\\n            offset,\\n            bytesCount\\n          )\\n          extractedBytes := sub(extractedBytesStartPtr, BYTES_ARR_LEN_VAR_BS)\\n        }\\n      }\\n\\n      dataPackageTimestamp = extractedTimestamp;\\n\\n      // Verifying the off-chain signature against on-chain hashed data\\n      signerAddress = SignatureLib.recoverSignerAddress(\\n        signedHash,\\n        calldataNegativeOffset + SIG_BS\\n      );\\n      signerIndex = getAuthorisedSignerIndex(signerAddress);\\n    }\\n\\n    // Updating helpful arrays\\n    {\\n      calldataNegativeOffset = calldataNegativeOffset + DATA_PACKAGE_WITHOUT_DATA_POINTS_BS;\\n      bytes32 dataPointDataFeedId;\\n      uint256 dataPointValue;\\n      for (uint256 dataPointIndex = 0; dataPointIndex < dataPointsCount;) {\\n        calldataNegativeOffset = calldataNegativeOffset + eachDataPointValueByteSize + DATA_POINT_SYMBOL_BS;\\n        // Extracting data feed id and value for the current data point\\n        (dataPointDataFeedId, dataPointValue) = _extractDataPointValueAndDataFeedId(\\n          calldataNegativeOffset,\\n          eachDataPointValueByteSize\\n        );\\n\\n        for (\\n          uint256 dataFeedIdIndex = 0;\\n          dataFeedIdIndex < dataFeedIds.length;\\n        ) {\\n          if (dataPointDataFeedId == dataFeedIds[dataFeedIdIndex]) {\\n            uint256 bitmapSignersForDataFeedId = signersBitmapForDataFeedIds[dataFeedIdIndex];\\n\\n            if (\\n              !BitmapLib.getBitFromBitmap(bitmapSignersForDataFeedId, signerIndex) && /* current signer was not counted for current dataFeedId */\\n              uniqueSignerCountForDataFeedIds[dataFeedIdIndex] < getUniqueSignersThreshold()\\n            ) {\\n              // Add new value\\n              valuesForDataFeeds[dataFeedIdIndex][uniqueSignerCountForDataFeedIds[dataFeedIdIndex]] = dataPointValue;\\n\\n              // Increase unique signer counter\\n              uniqueSignerCountForDataFeedIds[dataFeedIdIndex]++;\\n\\n              // Update signers bitmap\\n              signersBitmapForDataFeedIds[dataFeedIdIndex] = BitmapLib.setBitInBitmap(\\n                bitmapSignersForDataFeedId,\\n                signerIndex\\n              );\\n            }\\n\\n            // Breaking, as there couldn't be several indexes for the same feed ID\\n            break;\\n          }\\n          unchecked {\\n            dataFeedIdIndex++;\\n          }\\n        }\\n        unchecked {\\n           dataPointIndex++;\\n        }\\n      }\\n    }\\n\\n    return (calldataNegativeOffset, dataPackageTimestamp);\\n  }\\n\\n  /**\\n   * @dev This is a private helpful function, which aggregates values from different\\n   * authorised signers for the given arrays of values for each data feed\\n   *\\n   * @param valuesForDataFeeds 2-dimensional array, valuesForDataFeeds[i][j] contains\\n   * j-th value for the i-th data feed\\n   * @param uniqueSignerCountForDataFeedIds an array with the numbers of unique signers\\n   * for each data feed\\n   *\\n   * @return An array of the aggregated values\\n   */\\n  function _getAggregatedValues(\\n    uint256[][] memory valuesForDataFeeds,\\n    uint256[] memory uniqueSignerCountForDataFeedIds\\n  ) private view returns (uint256[] memory) {\\n    uint256[] memory aggregatedValues = new uint256[](valuesForDataFeeds.length);\\n    uint256 uniqueSignersThreshold = getUniqueSignersThreshold();\\n\\n    for (uint256 dataFeedIndex = 0; dataFeedIndex < valuesForDataFeeds.length;) {\\n      if (uniqueSignerCountForDataFeedIds[dataFeedIndex] < uniqueSignersThreshold) {\\n        revert InsufficientNumberOfUniqueSigners(\\n          uniqueSignerCountForDataFeedIds[dataFeedIndex],\\n          uniqueSignersThreshold);\\n      }\\n      uint256 aggregatedValueForDataFeedId = aggregateValues(valuesForDataFeeds[dataFeedIndex]);\\n      aggregatedValues[dataFeedIndex] = aggregatedValueForDataFeedId;\\n      unchecked {\\n         dataFeedIndex++;\\n      }\\n    }\\n\\n    return aggregatedValues;\\n  }\\n}\\n\",\"keccak256\":\"0xba6efc19580f2a6a5c2e48a9513929b43127879d3972dee31db976653234cd76\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/core/RedstoneConsumerNumericBase.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"./RedstoneConsumerBase.sol\\\";\\n\\n/**\\n * @title The base contract for Redstone consumers' contracts that allows to\\n * securely calculate numeric redstone oracle values\\n * @author The Redstone Oracles team\\n * @dev This contract can extend other contracts to allow them\\n * securely fetch Redstone oracle data from transactions calldata\\n */\\nabstract contract RedstoneConsumerNumericBase is RedstoneConsumerBase {\\n  /**\\n   * @dev This function can be used in a consumer contract to securely extract an\\n   * oracle value for a given data feed id. Security is achieved by\\n   * signatures verification, timestamp validation, and aggregating values\\n   * from different authorised signers into a single numeric value. If any of the\\n   * required conditions do not match, the function will revert.\\n   * Note! This function expects that tx calldata contains redstone payload in the end\\n   * Learn more about redstone payload here: https://github.com/redstone-finance/redstone-oracles-monorepo/tree/main/packages/evm-connector#readme\\n   * @param dataFeedId bytes32 value that uniquely identifies the data feed\\n   * @return Extracted and verified numeric oracle value for the given data feed id\\n   */\\n  function getOracleNumericValueFromTxMsg(bytes32 dataFeedId)\\n    internal\\n    view\\n    virtual\\n    returns (uint256)\\n  {\\n    bytes32[] memory dataFeedIds = new bytes32[](1);\\n    dataFeedIds[0] = dataFeedId;\\n    return getOracleNumericValuesFromTxMsg(dataFeedIds)[0];\\n  }\\n\\n  /**\\n   * @dev This function can be used in a consumer contract to securely extract several\\n   * numeric oracle values for a given array of data feed ids. Security is achieved by\\n   * signatures verification, timestamp validation, and aggregating values\\n   * from different authorised signers into a single numeric value. If any of the\\n   * required conditions do not match, the function will revert.\\n   * Note! This function expects that tx calldata contains redstone payload in the end\\n   * Learn more about redstone payload here: https://github.com/redstone-finance/redstone-oracles-monorepo/tree/main/packages/evm-connector#readme\\n   * @param dataFeedIds An array of unique data feed identifiers\\n   * @return An array of the extracted and verified oracle values in the same order\\n   * as they are requested in the dataFeedIds array\\n   */\\n  function getOracleNumericValuesFromTxMsg(bytes32[] memory dataFeedIds)\\n    internal\\n    view\\n    virtual\\n    returns (uint256[] memory)\\n  {\\n    (uint256[] memory values, uint256 timestamp) = _securelyExtractOracleValuesAndTimestampFromTxMsg(dataFeedIds);\\n    validateTimestamp(timestamp);\\n    return values;\\n  }\\n\\n  /**\\n   * @dev This function can be used in a consumer contract to securely extract several\\n   * numeric oracle values for a given array of data feed ids. Security is achieved by\\n   * signatures verification and aggregating values from different authorised signers \\n   * into a single numeric value. If any of the required conditions do not match, \\n   * the function will revert.\\n   * Note! This function returns the timestamp of the packages (it requires it to be \\n   * the same for all), but does not validate this timestamp.\\n   * Note! This function expects that tx calldata contains redstone payload in the end\\n   * Learn more about redstone payload here: https://github.com/redstone-finance/redstone-oracles-monorepo/tree/main/packages/evm-connector#readme\\n   * @param dataFeedIds An array of unique data feed identifiers\\n   * @return An array of the extracted and verified oracle values in the same order\\n   * as they are requested in the dataFeedIds array and data packages timestamp\\n   */\\n   function getOracleNumericValuesAndTimestampFromTxMsg(bytes32[] memory dataFeedIds)\\n    internal\\n    view\\n    virtual\\n    returns (uint256[] memory, uint256)\\n  {\\n    return _securelyExtractOracleValuesAndTimestampFromTxMsg(dataFeedIds);\\n  }\\n\\n  /**\\n   * @dev This function works similarly to the `getOracleNumericValuesFromTxMsg` with the\\n   * only difference that it allows to request oracle data for an array of data feeds\\n   * that may contain duplicates\\n   * \\n   * @param dataFeedIdsWithDuplicates An array of data feed identifiers (duplicates are allowed)\\n   * @return An array of the extracted and verified oracle values in the same order\\n   * as they are requested in the dataFeedIdsWithDuplicates array\\n   */\\n  function getOracleNumericValuesWithDuplicatesFromTxMsg(bytes32[] memory dataFeedIdsWithDuplicates) internal view returns (uint256[] memory) {\\n    // Building an array without duplicates\\n    bytes32[] memory dataFeedIdsWithoutDuplicates = new bytes32[](dataFeedIdsWithDuplicates.length);\\n    bool alreadyIncluded;\\n    uint256 uniqueDataFeedIdsCount = 0;\\n\\n    for (uint256 indexWithDup = 0; indexWithDup < dataFeedIdsWithDuplicates.length; indexWithDup++) {\\n      // Checking if current element is already included in `dataFeedIdsWithoutDuplicates`\\n      alreadyIncluded = false;\\n      for (uint256 indexWithoutDup = 0; indexWithoutDup < uniqueDataFeedIdsCount; indexWithoutDup++) {\\n        if (dataFeedIdsWithoutDuplicates[indexWithoutDup] == dataFeedIdsWithDuplicates[indexWithDup]) {\\n          alreadyIncluded = true;\\n          break;\\n        }\\n      }\\n\\n      // Adding if not included\\n      if (!alreadyIncluded) {\\n        dataFeedIdsWithoutDuplicates[uniqueDataFeedIdsCount] = dataFeedIdsWithDuplicates[indexWithDup];\\n        uniqueDataFeedIdsCount++;\\n      }\\n    }\\n\\n    // Overriding dataFeedIdsWithoutDuplicates.length\\n    // Equivalent to: dataFeedIdsWithoutDuplicates.length = uniqueDataFeedIdsCount;\\n    assembly {\\n      mstore(dataFeedIdsWithoutDuplicates, uniqueDataFeedIdsCount)\\n    }\\n\\n    // Requesting oracle values (without duplicates)\\n    (uint256[] memory valuesWithoutDuplicates, uint256 timestamp) = _securelyExtractOracleValuesAndTimestampFromTxMsg(dataFeedIdsWithoutDuplicates);\\n    validateTimestamp(timestamp);\\n\\n    // Preparing result values array\\n    uint256[] memory valuesWithDuplicates = new uint256[](dataFeedIdsWithDuplicates.length);\\n    for (uint256 indexWithDup = 0; indexWithDup < dataFeedIdsWithDuplicates.length; indexWithDup++) {\\n      for (uint256 indexWithoutDup = 0; indexWithoutDup < dataFeedIdsWithoutDuplicates.length; indexWithoutDup++) {\\n        if (dataFeedIdsWithDuplicates[indexWithDup] == dataFeedIdsWithoutDuplicates[indexWithoutDup]) {\\n          valuesWithDuplicates[indexWithDup] = valuesWithoutDuplicates[indexWithoutDup];\\n          break;\\n        }\\n      }\\n    }\\n\\n    return valuesWithDuplicates;\\n  }\\n}\\n\",\"keccak256\":\"0x60562e5dccb3807e6e3e0966a96285973977b82859100a5a012dfc6d2f07b300\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/core/RedstoneDefaultsLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"../libs/NumericArrayLib.sol\\\";\\n\\n/**\\n * @title Default implementations of virtual redstone consumer base functions\\n * @author The Redstone Oracles team\\n */\\nlibrary RedstoneDefaultsLib {\\n  uint256 constant DEFAULT_MAX_DATA_TIMESTAMP_DELAY_SECONDS = 3 minutes;\\n  uint256 constant DEFAULT_MAX_DATA_TIMESTAMP_AHEAD_SECONDS = 1 minutes;\\n\\n  error TimestampFromTooLongFuture(uint256 receivedTimestampSeconds, uint256 blockTimestamp);\\n  error TimestampIsTooOld(uint256 receivedTimestampSeconds, uint256 blockTimestamp);\\n\\n  function validateTimestamp(uint256 receivedTimestampMilliseconds) internal view {\\n    // Getting data timestamp from future seems quite unlikely\\n    // But we've already spent too much time with different cases\\n    // Where block.timestamp was less than dataPackage.timestamp.\\n    // Some blockchains may case this problem as well.\\n    // That's why we add MAX_BLOCK_TIMESTAMP_DELAY\\n    // and allow data \\\"from future\\\" but with a small delay\\n    uint256 receivedTimestampSeconds = receivedTimestampMilliseconds / 1000;\\n\\n    if (block.timestamp < receivedTimestampSeconds) {\\n      if ((receivedTimestampSeconds - block.timestamp) > DEFAULT_MAX_DATA_TIMESTAMP_AHEAD_SECONDS) {\\n        revert TimestampFromTooLongFuture(receivedTimestampSeconds, block.timestamp);\\n      }\\n    } else if ((block.timestamp - receivedTimestampSeconds) > DEFAULT_MAX_DATA_TIMESTAMP_DELAY_SECONDS) {\\n      revert TimestampIsTooOld(receivedTimestampSeconds, block.timestamp);\\n    }\\n  }\\n\\n  function aggregateValues(uint256[] memory values) internal pure returns (uint256) {\\n    return NumericArrayLib.pickMedian(values);\\n  }\\n}\\n\",\"keccak256\":\"0x2671397b80164895fde099ab4b5576de2d009fddf72e5185659e4e5fbc34b5d5\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/data-services/MainDemoConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"../core/RedstoneConsumerNumericBase.sol\\\";\\n\\ncontract MainDemoConsumerBase is RedstoneConsumerNumericBase {\\n  function getDataServiceId() public view virtual override returns (string memory) {\\n    return \\\"redstone-main-demo\\\";\\n  }\\n\\n  function getUniqueSignersThreshold() public view virtual override returns (uint8) {\\n    return 1;\\n  }\\n\\n  function getAuthorisedSignerIndex(address signerAddress)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint8)\\n  {\\n    if (signerAddress == 0x0C39486f770B26F5527BBBf942726537986Cd7eb) {\\n      return 0;\\n    } else {\\n      revert SignerNotAuthorised(signerAddress);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xe0b8a30f65c8530fdd85bb7491677de4e4b66fdb3e2b2e7f02afd623dd91db8e\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/libs/BitmapLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\nlibrary BitmapLib {\\n  function setBitInBitmap(uint256 bitmap, uint256 bitIndex) internal pure returns (uint256) {\\n    return bitmap | (1 << bitIndex);\\n  }\\n\\n  function getBitFromBitmap(uint256 bitmap, uint256 bitIndex) internal pure returns (bool) {\\n    uint256 bitAtIndex = bitmap & (1 << bitIndex);\\n    return bitAtIndex > 0;\\n  }\\n}\\n\",\"keccak256\":\"0x4de3defbeb70cd59ce65dbc0be3d4620b4400cc2a665e64501524dc87d807635\",\"license\":\"MIT\"},\"@redstone-finance/evm-connector/contracts/libs/NumericArrayLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\nlibrary NumericArrayLib {\\n  // This function sort array in memory using bubble sort algorithm,\\n  // which performs even better than quick sort for small arrays\\n\\n  uint256 constant BYTES_ARR_LEN_VAR_BS = 32;\\n  uint256 constant UINT256_VALUE_BS = 32;\\n\\n  error CanNotPickMedianOfEmptyArray();\\n\\n  // This function modifies the array\\n  function pickMedian(uint256[] memory arr) internal pure returns (uint256) {\\n    if (arr.length == 2) {\\n      return (arr[0] + arr[1]) / 2;\\n    }\\n    if (arr.length == 0) {\\n      revert CanNotPickMedianOfEmptyArray();\\n    }\\n    sort(arr);\\n    uint256 middleIndex = arr.length / 2;\\n    if (arr.length % 2 == 0) {\\n      uint256 sum = arr[middleIndex - 1] + arr[middleIndex];\\n      return sum / 2;\\n    } else {\\n      return arr[middleIndex];\\n    }\\n  }\\n\\n  function sort(uint256[] memory arr) internal pure {\\n    assembly {\\n      let arrLength := mload(arr)\\n      let valuesPtr := add(arr, BYTES_ARR_LEN_VAR_BS)\\n      let endPtr := add(valuesPtr, mul(arrLength, UINT256_VALUE_BS))\\n      for {\\n        let arrIPtr := valuesPtr\\n      } lt(arrIPtr, endPtr) {\\n        arrIPtr := add(arrIPtr, UINT256_VALUE_BS) // arrIPtr += 32\\n      } {\\n        for {\\n          let arrJPtr := valuesPtr\\n        } lt(arrJPtr, arrIPtr) {\\n          arrJPtr := add(arrJPtr, UINT256_VALUE_BS) // arrJPtr += 32\\n        } {\\n          let arrI := mload(arrIPtr)\\n          let arrJ := mload(arrJPtr)\\n          if lt(arrI, arrJ) {\\n            mstore(arrIPtr, arrJ)\\n            mstore(arrJPtr, arrI)\\n          }\\n        }\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xea7a225601d873602c18add7d08c932865a434c16da2072cf9637a7783facd65\",\"license\":\"MIT\"},\"@redstone-finance/evm-connector/contracts/libs/SignatureLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\nlibrary SignatureLib {\\n  uint256 constant ECDSA_SIG_R_BS = 32;\\n  uint256 constant ECDSA_SIG_S_BS = 32;\\n  \\n  // Constants for ECDSA recovery ids\\n  uint8 constant RECOVERY_ID_27 = 27;\\n  uint8 constant RECOVERY_ID_28 = 28;\\n\\n  // Constant representing half of the curve order (secp256k1n / 2)\\n  uint256 constant HALF_CURVE_ORDER = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0;\\n\\n  error InvalidSignature(bytes32 signedHash);\\n\\n  function recoverSignerAddress(bytes32 signedHash, uint256 signatureCalldataNegativeOffset)\\n    internal\\n    pure\\n    returns (address signerAddress)\\n  {\\n    bytes32 r;\\n    bytes32 s;\\n    uint8 v;\\n    assembly {\\n      let signatureCalldataStartPos := sub(calldatasize(), signatureCalldataNegativeOffset)\\n      r := calldataload(signatureCalldataStartPos)\\n      signatureCalldataStartPos := add(signatureCalldataStartPos, ECDSA_SIG_R_BS)\\n      s := calldataload(signatureCalldataStartPos)\\n      signatureCalldataStartPos := add(signatureCalldataStartPos, ECDSA_SIG_S_BS)\\n      v := byte(0, calldataload(signatureCalldataStartPos)) // last byte of the signature memory array\\n    }\\n    // 27 and 28 are the only two valid recovery ids used for ECDSA signatures in Ethereum\\n    if (v != RECOVERY_ID_27 && v != RECOVERY_ID_28) {\\n      revert InvalidSignature(signedHash);\\n    }\\n    // Ensure that the s value is in the lower half of the secp256k1 curve order (s < secp256k1n/2+1)\\n    // to avoid signature malleability issues.\\n    if (uint256(s) > HALF_CURVE_ORDER) {\\n      revert InvalidSignature(signedHash);\\n    }\\n    signerAddress = ecrecover(signedHash, v, r, s);\\n    if (signerAddress == address(0)) {\\n      revert InvalidSignature(signedHash);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x8f86524f555c4e718eafba4b3a2be62e1f2e16ed6a11ffdec8c3e9dabc9e96c6\",\"license\":\"MIT\"},\"contracts/PriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@redstone-finance/evm-connector/contracts/data-services/MainDemoConsumerBase.sol\\\";\\n\\n/**\\n * @title PriceFeed\\n * @notice Fetches real-time price data using RedStone Pull oracle\\n * @dev Uses MainDemoConsumerBase for testnet compatibility\\n */\\ncontract PriceFeed is MainDemoConsumerBase {\\n\\n    /**\\n     * @notice Override timestamp validation to allow more lenient checks\\n     * @dev Allows oracle data from up to 15 minutes in the past or future\\n     * This is useful for local development where blockchain time may differ from real-time\\n     * @param receivedTimestampMilliseconds Timestamp from the oracle data package\\n     */\\n    function validateTimestamp(uint256 receivedTimestampMilliseconds) public view virtual override {\\n        // Convert block.timestamp from seconds to milliseconds\\n        uint256 blockTimestampMilliseconds = block.timestamp * 1000;\\n\\n        // Allow data from 15 minutes in the past or future\\n        uint256 maxTimestampDiffMilliseconds = 15 * 60 * 1000; // 15 minutes\\n\\n        // Check if timestamp is too far in the past\\n        if (blockTimestampMilliseconds > receivedTimestampMilliseconds) {\\n            require(\\n                blockTimestampMilliseconds - receivedTimestampMilliseconds <= maxTimestampDiffMilliseconds,\\n                \\\"Timestamp too old\\\"\\n            );\\n        }\\n        // Check if timestamp is too far in the future\\n        else {\\n            require(\\n                receivedTimestampMilliseconds - blockTimestampMilliseconds <= maxTimestampDiffMilliseconds,\\n                \\\"Timestamp too far in future\\\"\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Get the latest ETH/USD price\\n     * @return price The current ETH price in USD (8 decimals)\\n     */\\n    function getEthPrice() public view returns (uint256) {\\n        bytes32[] memory dataFeedIds = new bytes32[](1);\\n        dataFeedIds[0] = bytes32(\\\"ETH\\\");\\n\\n        uint256[] memory prices = getOracleNumericValuesFromTxMsg(dataFeedIds);\\n        return prices[0];\\n    }\\n\\n    /**\\n     * @notice Get the latest BTC/USD price\\n     * @return price The current BTC price in USD (8 decimals)\\n     */\\n    function getBtcPrice() public view returns (uint256) {\\n        bytes32[] memory dataFeedIds = new bytes32[](1);\\n        dataFeedIds[0] = bytes32(\\\"BTC\\\");\\n\\n        uint256[] memory prices = getOracleNumericValuesFromTxMsg(dataFeedIds);\\n        return prices[0];\\n    }\\n\\n    /**\\n     * @notice Get multiple prices at once\\n     * @return ethPrice The current ETH price\\n     * @return btcPrice The current BTC price\\n     */\\n    function getMultiplePrices() public view returns (uint256 ethPrice, uint256 btcPrice) {\\n        bytes32[] memory dataFeedIds = new bytes32[](2);\\n        dataFeedIds[0] = bytes32(\\\"ETH\\\");\\n        dataFeedIds[1] = bytes32(\\\"BTC\\\");\\n\\n        uint256[] memory prices = getOracleNumericValuesFromTxMsg(dataFeedIds);\\n        return (prices[0], prices[1]);\\n    }\\n}\\n\",\"keccak256\":\"0xd70e4ae24e73a3dd7a56808fd26ea2e7e526aa1d087a1fdb1cd6e6e2deb0f419\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506111cd806100206000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063b24ebfcc11610066578063b24ebfcc146100e8578063c274583a146100fb578063d94dc27e1461012f578063f50b2efe1461014c578063f90c49241461016157600080fd5b80633a3610bc146100985780633ce142f5146100b357806355a547d5146100d857806367c9b017146100e0575b600080fd5b6100a0610168565b6040519081526020015b60405180910390f35b6100c66100c1366004610f73565b6101e2565b60405160ff90911681526020016100aa565b6100a0610239565b6100a0610347565b6100a06100f6366004610fb2565b610386565b604080518082018252601281527172656473746f6e652d6d61696e2d64656d6f60701b602082015290516100aa9190611070565b610137610397565b604080519283526020830191909152016100aa565b61015f61015a3660046110be565b610457565b005b60016100c6565b604080516001808252818301909252600091829190602080830190803683370190505090506242544360e81b816000815181106101a7576101a76110d7565b60200260200101818152505060006101be8261051e565b9050806000815181106101d3576101d36110d7565b60200260200101519250505090565b60006001600160a01b038216730c39486f770b26f5527bbbf942726537986cd7eb0361021057506000919050565b6040516303b1166f60e61b81526001600160a01b03831660048201526024015b60405180910390fd5b600080610244610540565b90506000610251826105ee565b925061ffff169050600081900361027b57604051632154bfcf60e21b815260040160405180910390fd5b60005b818110156103415760006102918461063d565b90506000806102a1606887611103565b905060006102af8236611116565b9050803592508265ffffffffffff166000036102de57604051630336dc9d60e41b815260040160405180910390fd5b876000036102f6578265ffffffffffff16975061031e565b878365ffffffffffff161461031e5760405163d9d1f46560e01b815260040160405180910390fd5b6103288488611103565b965050505050808061033990611129565b91505061027e565b50505090565b604080516001808252818301909252600091829190602080830190803683370190505090506208aa8960eb1b816000815181106101a7576101a76110d7565b600061039182610679565b92915050565b6040805160028082526060820183526000928392839290916020830190803683370190505090506208aa8960eb1b816000815181106103d8576103d86110d7565b6020026020010181815250506242544360e81b816001815181106103fe576103fe6110d7565b60200260200101818152505060006104158261051e565b90508060008151811061042a5761042a6110d7565b602002602001015181600181518110610445576104456110d7565b60200260200101519350935050509091565b6000610465426103e8611142565b9050620dbba0828211156104c5578061047e8484611116565b11156104c05760405162461bcd60e51b8152602060048201526011602482015270151a5b595cdd185b5c081d1bdbc81bdb19607a1b6044820152606401610230565b505050565b806104d08385611116565b11156104c05760405162461bcd60e51b815260206004820152601b60248201527f54696d657374616d7020746f6f2066617220696e2066757475726500000000006044820152606401610230565b606060008061052c84610684565b9150915061053981610457565b5092915050565b60006602ed57011e0000601f1936013581161480610571576040516373bb264f60e11b815260040160405180910390fd5b6000366029111561059557604051632bcb7bc560e11b815260040160405180910390fd5b50602819360135600060096105b0600362ffffff8516611103565b6105ba9190611103565b9050366105c8600283611103565b11156105e75760405163c30a7bd760e01b815260040160405180910390fd5b9392505050565b600080806105fd602085611103565b90503681111561062057604051632bcb7bc560e11b815260040160405180910390fd5b3681900335925082610633600286611103565b9250925050915091565b600080600061064b8461089f565b9092509050604e61065d826020611103565b6106679084611142565b6106719190611103565b949350505050565b6000610391826108f2565b6060600080835167ffffffffffffffff8111156106a3576106a3610f9c565b6040519080825280602002602001820160405280156106cc578160200160208202803683370190505b5090506000845167ffffffffffffffff8111156106eb576106eb610f9c565b604051908082528060200260200182016040528015610714578160200160208202803683370190505b5090506000855167ffffffffffffffff81111561073357610733610f9c565b60405190808252806020026020018201604052801561076657816020015b60608152602001906001900390816107515790505b509050600160005b87518110156107df578167ffffffffffffffff81111561079057610790610f9c565b6040519080825280602002602001820160405280156107b9578160200160208202803683370190505b508382815181106107cc576107cc6110d7565b602090810291909101015260010161076e565b5060006107ea610540565b905060006107f7826105ee565b60405190935061ffff909116915060005b8281101561088657600061081f8c8a8a8a89610a16565b909550905060008190036108465760405163dfb25a7960e01b815260040160405180910390fd5b898114610876578960000361085d57809950610876565b60405163265e23a160e11b815260040160405180910390fd5b5060208201604052600101610808565b506108918588610ca1565b985050505050505050915091565b60008080808060206108b2604188611103565b6108bc9190611103565b6108c69036611116565b8035935090506108d7600382611116565b62ffffff9390931696923563ffffffff169550919350505050565b6000815160020361094957600282600181518110610912576109126110d7565b60200260200101518360008151811061092d5761092d6110d7565b602002602001015161093f9190611103565b610391919061116f565b815160000361096b57604051639e198af960e01b815260040160405180910390fd5b61097482610db0565b600060028351610984919061116f565b9050600283516109949190611183565b6000036109f45760008382815181106109af576109af6110d7565b6020026020010151846001846109c59190611116565b815181106109d5576109d56110d7565b60200260200101516109e79190611103565b905061067160028261116f565b828181518110610a0657610a066110d7565b6020026020010151915050919050565b6000806000806000610a278661089f565b909250905060008060608180600d610a40602088611103565b610a4a9089611142565b610a549190611103565b91506000610a6360688d611103565b610a6d9036611116565b9050600083610a7d60418f611103565b610a879190611103565b610a919036611116565b9050610a9d8482610ab0565b9450836020860120955081359250610ad4565b60408051838152602081850181019092526000910183838237601f19019392505050565b8265ffffffffffff169a50610af58660418f610af09190611103565b610dfe565b9650610b00876101e2565b60ff16995050505050505050604e86610b199190611103565b955060008060005b84811015610c8e576020610b35858b611103565b610b3f9190611103565b9850610b4b8985610f20565b909350915060005b8d51811015610c85578d8181518110610b6e57610b6e6110d7565b60200260200101518403610c7d5760008c8281518110610b9057610b906110d7565b60200260200101519050610ba981896001901b16151590565b158015610bd25750600160ff168e8381518110610bc857610bc86110d7565b6020026020010151105b15610c7757838c8381518110610bea57610bea6110d7565b60200260200101518f8481518110610c0457610c046110d7565b602002602001015181518110610c1c57610c1c6110d7565b6020026020010181815250508d8281518110610c3a57610c3a6110d7565b602002602001018051809190610c4f90611129565b9052506001881b81178d8381518110610c6a57610c6a6110d7565b6020026020010181815250505b50610c85565b600101610b53565b50600101610b21565b5050508594505050509550959350505050565b60606000835167ffffffffffffffff811115610cbf57610cbf610f9c565b604051908082528060200260200182016040528015610ce8578160200160208202803683370190505b509050600160005b8551811015610da65781858281518110610d0c57610d0c6110d7565b60200260200101511015610d5957848181518110610d2c57610d2c6110d7565b602002602001015182604051632b13aef560e01b8152600401610230929190918252602082015260400190565b6000610d7d878381518110610d7057610d706110d7565b6020026020010151610386565b905080848381518110610d9257610d926110d7565b602090810291909101015250600101610cf0565b5090949350505050565b8051602082016020820281019150805b82811015610df857815b81811015610def578151815180821015610de5578084528183525b5050602001610dca565b50602001610dc0565b50505050565b60003682900380359060208101359060400135831a601b8114801590610e28575060ff8116601c14155b15610e4957604051633335be5d60e11b815260048101879052602401610230565b7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0821115610e8d57604051633335be5d60e11b815260048101879052602401610230565b60408051600081526020810180835288905260ff831691810191909152606081018490526080810183905260019060a0016020604051602081039080840390855afa158015610ee0573d6000803e3d6000fd5b5050604051601f1901519450506001600160a01b038416610f1757604051633335be5d60e11b815260048101879052602401610230565b50505092915050565b60008080610f2e8536611116565b9050803592506020810135915060218410610f5f576040516360007e2160e11b815260048101859052602401610230565b8360200360080282901c9150509250929050565b600060208284031215610f8557600080fd5b81356001600160a01b03811681146105e757600080fd5b634e487b7160e01b600052604160045260246000fd5b60006020808385031215610fc557600080fd5b823567ffffffffffffffff80821115610fdd57600080fd5b818501915085601f830112610ff157600080fd5b81358181111561100357611003610f9c565b8060051b604051601f19603f8301168101818110858211171561102857611028610f9c565b60405291825284820192508381018501918883111561104657600080fd5b938501935b828510156110645784358452938501939285019261104b565b98975050505050505050565b600060208083528351808285015260005b8181101561109d57858101830151858201604001528201611081565b506000604082860101526040601f19601f8301168501019250505092915050565b6000602082840312156110d057600080fd5b5035919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b80820180821115610391576103916110ed565b81810381811115610391576103916110ed565b60006001820161113b5761113b6110ed565b5060010190565b8082028115828204841417610391576103916110ed565b634e487b7160e01b600052601260045260246000fd5b60008261117e5761117e611159565b500490565b60008261119257611192611159565b50069056fea26469706673582212208a80927621d4ce0e81bb4a8602c7d1a0ea4e905f509c0699f8eb514233e967ce64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c8063b24ebfcc11610066578063b24ebfcc146100e8578063c274583a146100fb578063d94dc27e1461012f578063f50b2efe1461014c578063f90c49241461016157600080fd5b80633a3610bc146100985780633ce142f5146100b357806355a547d5146100d857806367c9b017146100e0575b600080fd5b6100a0610168565b6040519081526020015b60405180910390f35b6100c66100c1366004610f73565b6101e2565b60405160ff90911681526020016100aa565b6100a0610239565b6100a0610347565b6100a06100f6366004610fb2565b610386565b604080518082018252601281527172656473746f6e652d6d61696e2d64656d6f60701b602082015290516100aa9190611070565b610137610397565b604080519283526020830191909152016100aa565b61015f61015a3660046110be565b610457565b005b60016100c6565b604080516001808252818301909252600091829190602080830190803683370190505090506242544360e81b816000815181106101a7576101a76110d7565b60200260200101818152505060006101be8261051e565b9050806000815181106101d3576101d36110d7565b60200260200101519250505090565b60006001600160a01b038216730c39486f770b26f5527bbbf942726537986cd7eb0361021057506000919050565b6040516303b1166f60e61b81526001600160a01b03831660048201526024015b60405180910390fd5b600080610244610540565b90506000610251826105ee565b925061ffff169050600081900361027b57604051632154bfcf60e21b815260040160405180910390fd5b60005b818110156103415760006102918461063d565b90506000806102a1606887611103565b905060006102af8236611116565b9050803592508265ffffffffffff166000036102de57604051630336dc9d60e41b815260040160405180910390fd5b876000036102f6578265ffffffffffff16975061031e565b878365ffffffffffff161461031e5760405163d9d1f46560e01b815260040160405180910390fd5b6103288488611103565b965050505050808061033990611129565b91505061027e565b50505090565b604080516001808252818301909252600091829190602080830190803683370190505090506208aa8960eb1b816000815181106101a7576101a76110d7565b600061039182610679565b92915050565b6040805160028082526060820183526000928392839290916020830190803683370190505090506208aa8960eb1b816000815181106103d8576103d86110d7565b6020026020010181815250506242544360e81b816001815181106103fe576103fe6110d7565b60200260200101818152505060006104158261051e565b90508060008151811061042a5761042a6110d7565b602002602001015181600181518110610445576104456110d7565b60200260200101519350935050509091565b6000610465426103e8611142565b9050620dbba0828211156104c5578061047e8484611116565b11156104c05760405162461bcd60e51b8152602060048201526011602482015270151a5b595cdd185b5c081d1bdbc81bdb19607a1b6044820152606401610230565b505050565b806104d08385611116565b11156104c05760405162461bcd60e51b815260206004820152601b60248201527f54696d657374616d7020746f6f2066617220696e2066757475726500000000006044820152606401610230565b606060008061052c84610684565b9150915061053981610457565b5092915050565b60006602ed57011e0000601f1936013581161480610571576040516373bb264f60e11b815260040160405180910390fd5b6000366029111561059557604051632bcb7bc560e11b815260040160405180910390fd5b50602819360135600060096105b0600362ffffff8516611103565b6105ba9190611103565b9050366105c8600283611103565b11156105e75760405163c30a7bd760e01b815260040160405180910390fd5b9392505050565b600080806105fd602085611103565b90503681111561062057604051632bcb7bc560e11b815260040160405180910390fd5b3681900335925082610633600286611103565b9250925050915091565b600080600061064b8461089f565b9092509050604e61065d826020611103565b6106679084611142565b6106719190611103565b949350505050565b6000610391826108f2565b6060600080835167ffffffffffffffff8111156106a3576106a3610f9c565b6040519080825280602002602001820160405280156106cc578160200160208202803683370190505b5090506000845167ffffffffffffffff8111156106eb576106eb610f9c565b604051908082528060200260200182016040528015610714578160200160208202803683370190505b5090506000855167ffffffffffffffff81111561073357610733610f9c565b60405190808252806020026020018201604052801561076657816020015b60608152602001906001900390816107515790505b509050600160005b87518110156107df578167ffffffffffffffff81111561079057610790610f9c565b6040519080825280602002602001820160405280156107b9578160200160208202803683370190505b508382815181106107cc576107cc6110d7565b602090810291909101015260010161076e565b5060006107ea610540565b905060006107f7826105ee565b60405190935061ffff909116915060005b8281101561088657600061081f8c8a8a8a89610a16565b909550905060008190036108465760405163dfb25a7960e01b815260040160405180910390fd5b898114610876578960000361085d57809950610876565b60405163265e23a160e11b815260040160405180910390fd5b5060208201604052600101610808565b506108918588610ca1565b985050505050505050915091565b60008080808060206108b2604188611103565b6108bc9190611103565b6108c69036611116565b8035935090506108d7600382611116565b62ffffff9390931696923563ffffffff169550919350505050565b6000815160020361094957600282600181518110610912576109126110d7565b60200260200101518360008151811061092d5761092d6110d7565b602002602001015161093f9190611103565b610391919061116f565b815160000361096b57604051639e198af960e01b815260040160405180910390fd5b61097482610db0565b600060028351610984919061116f565b9050600283516109949190611183565b6000036109f45760008382815181106109af576109af6110d7565b6020026020010151846001846109c59190611116565b815181106109d5576109d56110d7565b60200260200101516109e79190611103565b905061067160028261116f565b828181518110610a0657610a066110d7565b6020026020010151915050919050565b6000806000806000610a278661089f565b909250905060008060608180600d610a40602088611103565b610a4a9089611142565b610a549190611103565b91506000610a6360688d611103565b610a6d9036611116565b9050600083610a7d60418f611103565b610a879190611103565b610a919036611116565b9050610a9d8482610ab0565b9450836020860120955081359250610ad4565b60408051838152602081850181019092526000910183838237601f19019392505050565b8265ffffffffffff169a50610af58660418f610af09190611103565b610dfe565b9650610b00876101e2565b60ff16995050505050505050604e86610b199190611103565b955060008060005b84811015610c8e576020610b35858b611103565b610b3f9190611103565b9850610b4b8985610f20565b909350915060005b8d51811015610c85578d8181518110610b6e57610b6e6110d7565b60200260200101518403610c7d5760008c8281518110610b9057610b906110d7565b60200260200101519050610ba981896001901b16151590565b158015610bd25750600160ff168e8381518110610bc857610bc86110d7565b6020026020010151105b15610c7757838c8381518110610bea57610bea6110d7565b60200260200101518f8481518110610c0457610c046110d7565b602002602001015181518110610c1c57610c1c6110d7565b6020026020010181815250508d8281518110610c3a57610c3a6110d7565b602002602001018051809190610c4f90611129565b9052506001881b81178d8381518110610c6a57610c6a6110d7565b6020026020010181815250505b50610c85565b600101610b53565b50600101610b21565b5050508594505050509550959350505050565b60606000835167ffffffffffffffff811115610cbf57610cbf610f9c565b604051908082528060200260200182016040528015610ce8578160200160208202803683370190505b509050600160005b8551811015610da65781858281518110610d0c57610d0c6110d7565b60200260200101511015610d5957848181518110610d2c57610d2c6110d7565b602002602001015182604051632b13aef560e01b8152600401610230929190918252602082015260400190565b6000610d7d878381518110610d7057610d706110d7565b6020026020010151610386565b905080848381518110610d9257610d926110d7565b602090810291909101015250600101610cf0565b5090949350505050565b8051602082016020820281019150805b82811015610df857815b81811015610def578151815180821015610de5578084528183525b5050602001610dca565b50602001610dc0565b50505050565b60003682900380359060208101359060400135831a601b8114801590610e28575060ff8116601c14155b15610e4957604051633335be5d60e11b815260048101879052602401610230565b7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0821115610e8d57604051633335be5d60e11b815260048101879052602401610230565b60408051600081526020810180835288905260ff831691810191909152606081018490526080810183905260019060a0016020604051602081039080840390855afa158015610ee0573d6000803e3d6000fd5b5050604051601f1901519450506001600160a01b038416610f1757604051633335be5d60e11b815260048101879052602401610230565b50505092915050565b60008080610f2e8536611116565b9050803592506020810135915060218410610f5f576040516360007e2160e11b815260048101859052602401610230565b8360200360080282901c9150509250929050565b600060208284031215610f8557600080fd5b81356001600160a01b03811681146105e757600080fd5b634e487b7160e01b600052604160045260246000fd5b60006020808385031215610fc557600080fd5b823567ffffffffffffffff80821115610fdd57600080fd5b818501915085601f830112610ff157600080fd5b81358181111561100357611003610f9c565b8060051b604051601f19603f8301168101818110858211171561102857611028610f9c565b60405291825284820192508381018501918883111561104657600080fd5b938501935b828510156110645784358452938501939285019261104b565b98975050505050505050565b600060208083528351808285015260005b8181101561109d57858101830151858201604001528201611081565b506000604082860101526040601f19601f8301168501019250505092915050565b6000602082840312156110d057600080fd5b5035919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b80820180821115610391576103916110ed565b81810381811115610391576103916110ed565b60006001820161113b5761113b6110ed565b5060010190565b8082028115828204841417610391576103916110ed565b634e487b7160e01b600052601260045260246000fd5b60008261117e5761117e611159565b500490565b60008261119257611192611159565b50069056fea26469706673582212208a80927621d4ce0e81bb4a8602c7d1a0ea4e905f509c0699f8eb514233e967ce64736f6c63430008110033",
  "devdoc": {
    "details": "Uses MainDemoConsumerBase for testnet compatibility",
    "kind": "dev",
    "methods": {
      "aggregateValues(uint256[])": {
        "details": "This function may be overridden by the child consumer contract. It should aggregate values from different signers to a single uint value. By default, it calculates the median value",
        "params": {
          "values": "An array of uint256 values from different signers"
        },
        "returns": {
          "_0": "Result of the aggregation in the form of a single number"
        }
      },
      "getBtcPrice()": {
        "returns": {
          "_0": "price The current BTC price in USD (8 decimals)"
        }
      },
      "getDataServiceId()": {
        "details": "This function must be implemented by the child consumer contract. It should return dataServiceId which DataServiceWrapper will use if not provided explicitly . If not overridden, value will always have to be provided explicitly in DataServiceWrapper.",
        "returns": {
          "_0": "dataServiceId being consumed by contract"
        }
      },
      "getEthPrice()": {
        "returns": {
          "_0": "price The current ETH price in USD (8 decimals)"
        }
      },
      "getMultiplePrices()": {
        "returns": {
          "btcPrice": "The current BTC price",
          "ethPrice": "The current ETH price"
        }
      },
      "getUniqueSignersThreshold()": {
        "details": "This function must be implemented by the child consumer contract.",
        "returns": {
          "_0": "The minimum required value of unique authorised signers"
        }
      },
      "validateTimestamp(uint256)": {
        "details": "Allows oracle data from up to 15 minutes in the past or future This is useful for local development where blockchain time may differ from real-time",
        "params": {
          "receivedTimestampMilliseconds": "Timestamp from the oracle data package"
        }
      }
    },
    "title": "PriceFeed",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getBtcPrice()": {
        "notice": "Get the latest BTC/USD price"
      },
      "getEthPrice()": {
        "notice": "Get the latest ETH/USD price"
      },
      "getMultiplePrices()": {
        "notice": "Get multiple prices at once"
      },
      "validateTimestamp(uint256)": {
        "notice": "Override timestamp validation to allow more lenient checks"
      }
    },
    "notice": "Fetches real-time price data using RedStone Pull oracle",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}